#!/usr/bin/env bash

if [ $# == 0 ]; then
    exit 3
fi

APP_DIR=$(pwd)
if [[ -d "$APP_DIR/app" && -f "$APP_DIR/app/.bash_cli" ]]; then
    APP_DIR="$APP_DIR/app"
fi

if [[ ! -f "$APP_DIR/.bash_cli" ]]; then
    >&2 echo -e '\033[31mYou are not within a Bash CLI project\033[39m'
    >&2 echo "Please change your directory to a valid project or run the init command to set one up."
    exit 1
fi

CMD_DIR="$APP_DIR"

if [[ $# -gt 1 ]]; then
    for i in $(($#-1)); do
        DIR=${!i}
        CMD_DIR="$CMD_DIR/$DIR"
        if [[ ! -d "$CMD_DIR" ]]; then
            mkdir -p "$CMD_DIR"
            echo "TODO: Add help for this directory" > "$CMD_DIR/.help"
        fi
    done
fi

CMD_NAME="${!#}"
if [[ -f "$CMD_DIR/$CMD_NAME" ]]; then
    >&2 echo -e '\033[31mThat command already exists\033[39m'
    >&2 echo "We'd rather not overwrite commands you've already created."
    exit 1
fi

cat > "$CMD_DIR/$CMD_NAME" <<EOT
#!/usr/bin/env bash
set -euo pipefail
IFS=$'\n\t'

# Load utility methods
. "\$ROOT_DIR/utils"

cleanup() {
    # Remove temporary files
    # Restart services
    # ...

    info "$CMD_NAME - cleanup done"
}

if [[ "\${BASH_SOURCE[0]}" = "\$0" ]]; then
    trap cleanup EXIT

    # TODO remove this test if the command is without parameters
    if [ \$# == 0 ]; then
        exit 3
    fi

    # TODO: Script goes here
    # ...

    # Some logging capabilites
    # info "log some information"
    # warning "print a warning"
    # error "log an error"
    # fatal "log information before to exit in error"

    # Read some value from the runtime configuration file (JSON format)
    # cli_call rc read '.key'
fi
EOT

chmod u+x "$CMD_DIR/$CMD_NAME"

cat > "$CMD_DIR/$CMD_NAME.usage" <<EOT
arguments...

EOT

cat > "$CMD_DIR/$CMD_NAME.help" <<EOT
TODO: Fill out the help information for this command.

Arguments:
    arguments    the arguments you wish to provide to this command.

EOT

echo -e '\033[32mCommand \033[36m'"$*"'\033[32m created successfully\033[39m'
